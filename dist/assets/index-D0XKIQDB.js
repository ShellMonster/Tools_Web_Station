import{g as A}from"./index-DwkGyXRE.js";function D(x,p){for(var m=0;m<p.length;m++){const o=p[m];if(typeof o!="string"&&!Array.isArray(o)){for(const f in o)if(f!=="default"&&!(f in x)){const g=Object.getOwnPropertyDescriptor(o,f);g&&Object.defineProperty(x,f,g.get?g:{enumerable:!0,get:()=>o[f]})}}}return Object.freeze(Object.defineProperty(x,Symbol.toStringTag,{value:"Module"}))}var E={exports:{}},b={exports:{}},T;function F(){return T||(T=1,(function(x,p){Object.defineProperty(p,"__esModule",{value:!0}),p.ParsingError=void 0;class m extends Error{constructor(r,i){super(r),this.cause=i}}p.ParsingError=m;let o;function f(){return P(!1)||O()||w()||j()||C(!1)}function g(){return e(/\s*/),P(!0)||w()||S()||C(!1)}function a(){const t=C(!0),r=[];let i,c=g();for(;c;){if(c.node.type==="Element"){if(i)throw new Error("Found multiple root nodes");i=c.node}c.excluded||r.push(c.node),c=g()}if(!i)throw new m("Failed to parse XML","Root Element not found");if(o.xml.length!==0)throw new m("Failed to parse XML","Not Well-Formed XML");return{declaration:t?t.node:null,root:i,children:r}}function C(t){const r=e(t?/^<\?(xml(-stylesheet)?)\s*/:/^<\?([\w-:.]+)\s*/);if(!r)return;const i={name:r[1],type:"ProcessingInstruction",attributes:{}};for(;!(l()||s("?>"));){const c=y();if(c)i.attributes[c.name]=c.value;else return}return e(/\?>/),{excluded:t?!1:o.options.filter(i)===!1,node:i}}function P(t){const r=e(/^<([^?!</>\s]+)\s*/);if(!r)return;const i={type:"Element",name:r[1],attributes:{},children:[]},c=t?!1:o.options.filter(i)===!1;for(;!(l()||s(">")||s("?>")||s("/>"));){const h=y();if(h)i.attributes[h.name]=h.value;else return}if(e(/^\s*\/>/))return i.children=null,{excluded:c,node:i};e(/\??>/);let u=f();for(;u;)u.excluded||i.children.push(u.node),u=f();if(o.options.strictMode){const h=`</${i.name}>`;if(o.xml.startsWith(h))o.xml=o.xml.slice(h.length);else throw new m("Failed to parse XML",`Closing tag not matching "${h}"`)}else e(/^<\/[\w-:.\u00C0-\u00FF]+\s*>/);return{excluded:c,node:i}}function S(){const t=e(/^<!DOCTYPE\s+\S+\s+SYSTEM[^>]*>/)||e(/^<!DOCTYPE\s+\S+\s+PUBLIC[^>]*>/)||e(/^<!DOCTYPE\s+\S+\s*\[[^\]]*]>/)||e(/^<!DOCTYPE\s+\S+\s*>/);if(t){const r={type:"DocumentType",content:t[0]};return{excluded:o.options.filter(r)===!1,node:r}}}function j(){if(o.xml.startsWith("<![CDATA[")){const t=o.xml.indexOf("]]>");if(t>-1){const r=t+3,i={type:"CDATA",content:o.xml.substring(0,r)};return o.xml=o.xml.slice(r),{excluded:o.options.filter(i)===!1,node:i}}}}function w(){const t=e(/^<!--[\s\S]*?-->/);if(t){const r={type:"Comment",content:t[0]};return{excluded:o.options.filter(r)===!1,node:r}}}function O(){const t=e(/^([^<]+)/);if(t){const r={type:"Text",content:t[1]};return{excluded:o.options.filter(r)===!1,node:r}}}function y(){const t=e(/([^=]+)\s*=\s*("[^"]*"|'[^']*'|[^>\s]+)\s*/);if(t)return{name:t[1].trim(),value:n(t[2].trim())}}function n(t){return t.replace(/^['"]|['"]$/g,"")}function e(t){const r=o.xml.match(t);if(r)return o.xml=o.xml.slice(r[0].length),r}function l(){return o.xml.length===0}function s(t){return o.xml.indexOf(t)===0}function d(t,r={}){t=t.trim();const i=r.filter||(()=>!0);return o={xml:t,options:Object.assign(Object.assign({},r),{filter:i,strictMode:r.strictMode===!0})},a()}x.exports=d,p.default=d})(b,b.exports)),b.exports}var _=E.exports,v;function N(){return v||(v=1,(function(x,p){var m=_&&_.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(p,"__esModule",{value:!0});const o=m(F());function f(n){if(!n.options.indentation&&!n.options.lineSeparator)return;n.content+=n.options.lineSeparator;let e;for(e=0;e<n.level;e++)n.content+=n.options.indentation}function g(n){n.content=n.content.replace(/ +$/,"");let e;for(e=0;e<n.level;e++)n.content+=n.options.indentation}function a(n,e){n.content+=e}function C(n,e,l){if(typeof n.content=="string")P(n.content,e,l);else if(n.type==="Element")j(n,e,l);else if(n.type==="ProcessingInstruction")O(n,e);else throw new Error("Unknown node type: "+n.type)}function P(n,e,l){if(!l){const s=n.trim();(e.options.lineSeparator||s.length===0)&&(n=s)}n.length>0&&(!l&&e.content.length>0&&f(e),a(e,n))}function S(n,e){const l="/"+n.join("/"),s=n[n.length-1];return e.includes(s)||e.includes(l)}function j(n,e,l){if(e.path.push(n.name),!l&&e.content.length>0&&f(e),a(e,"<"+n.name),w(e,n.attributes),n.children===null||e.options.forceSelfClosingEmptyTag&&n.children.length===0){const s=e.options.whiteSpaceAtEndOfSelfclosingTag?" />":"/>";a(e,s)}else if(n.children.length===0)a(e,"></"+n.name+">");else{const s=n.children;a(e,">"),e.level++;let d=n.attributes["xml:space"]==="preserve"||l,t=!1;if(!d&&e.options.ignoredPaths&&(t=S(e.path,e.options.ignoredPaths),d=t),!d&&e.options.collapseContent){let r=!1,i=!1,c=!1;s.forEach(function(u,h){u.type==="Text"?(u.content.includes(`
`)?(i=!0,u.content=u.content.trim()):(h===0||h===s.length-1)&&!l&&u.content.trim().length===0&&(u.content=""),(u.content.trim().length>0||s.length===1)&&(r=!0)):u.type==="CDATA"?r=!0:c=!0}),r&&(!c||!i)&&(d=!0)}s.forEach(function(r){C(r,e,l||d)}),e.level--,!l&&!d&&f(e),t&&g(e),a(e,"</"+n.name+">")}e.path.pop()}function w(n,e){Object.keys(e).forEach(function(l){const s=e[l].replace(/"/g,"&quot;");a(n," "+l+'="'+s+'"')})}function O(n,e){e.content.length>0&&f(e),a(e,"<?"+n.name),w(e,n.attributes),a(e,"?>")}function y(n,e={}){e.indentation="indentation"in e?e.indentation:"    ",e.collapseContent=e.collapseContent===!0,e.lineSeparator="lineSeparator"in e?e.lineSeparator:`\r
`,e.whiteSpaceAtEndOfSelfclosingTag=e.whiteSpaceAtEndOfSelfclosingTag===!0,e.throwOnFailure=e.throwOnFailure!==!1;try{const l=(0,o.default)(n,{filter:e.filter,strictMode:e.strictMode}),s={content:"",level:0,options:e,path:[]};return l.declaration&&O(l.declaration,s),l.children.forEach(function(d){C(d,s,!1)}),e.lineSeparator?s.content.replace(/\r\n/g,`
`).replace(/\n/g,e.lineSeparator):s.content}catch(l){if(e.throwOnFailure)throw l;return n}}y.minify=(n,e={})=>y(n,Object.assign(Object.assign({},e),{indentation:"",lineSeparator:""})),x.exports=y,p.default=y})(E,E.exports)),E.exports}var M=N();const $=A(M),X=D({__proto__:null,default:$},[M]);export{X as i};
